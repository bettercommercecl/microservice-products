import CategoryProduct from '#models/category_product'
import Category from '#models/category'
import BigCommerceService from '#services/bigcommerce_service'
import Logger from '@adonisjs/core/services/logger'
import { FormattedProductWithModelVariants } from '#interfaces/formatted_product.interface'

// ‚úÖ INTERFACES PARA TIPADO FUERTE
interface BigCommerceProduct {
  id: number
  product_id: number
  categories: number[]
  name: string
  description: string
  brand_id: number
  price: number
  sale_price: number
  inventory_level: number
  quantity: number
  weight: number
  width: number
  depth: number
  height: number
  sort_order: number
  is_featured: boolean
  is_visible: boolean
  meta_keywords?: string[]
  meta_description?: string
  custom_url?: {
    url: string
  }
  images: Array<{
    is_thumbnail: boolean
    url_standard: string
    url_zoom: string
    description: string
    sort_order: number
  }>
  variants: Array<{
    id: number
    sku: string
    price: number
    sale_price: number | null
    calculated_price: number
    inventory_level: number
    calculated_weight: number
    width: number
    depth: number
    height: number
    image_url: string
    option_values: any[]
    value_id: number
  }>
}

export default class CategoryService {
  private readonly logger = Logger.child({ service: 'CategoryService' })

  /**
   * Obtiene todas las categor√≠as
   */
  async getAllCategories() {
    this.logger.info('üìÇ Obteniendo todas las categor√≠as de la base de datos...')
    const categories = await Category.all()
    this.logger.info(`‚úÖ Categor√≠as obtenidas exitosamente: ${categories.length} categor√≠as`)
    return categories
  }

  /**
   * Obtiene una categor√≠a por ID
   */
  async getCategoryById(id: number) {
    this.logger.info(`üîç Obteniendo categor√≠a por ID: ${id}`)
    const category = await Category.findOrFail(id)
    this.logger.info(`‚úÖ Categor√≠a obtenida exitosamente: ${category.title}`)
    return category
  }

  /**
   * Sincroniza las categor√≠as desde BigCommerce
   */
  async syncCategories() {
    try {
      this.logger.info('üîÑ Iniciando sincronizaci√≥n de categor√≠as desde BigCommerce...')

      const bigCommerceService = new BigCommerceService()
      const categories = await bigCommerceService.getCategories()
      this.logger.info(`üìä Categor√≠as obtenidas de BigCommerce: ${categories.length} categor√≠as`)

      if (categories.length === 0) {
        this.logger.warn('‚ö†Ô∏è No se obtuvieron categor√≠as de BigCommerce')
        return {
          success: true,
          message: 'No hay categor√≠as para sincronizar',
          data: { faileds: [] },
        }
      }

      // üöÄ OPTIMIZACI√ìN: Preparar datos para operaci√≥n masiva
      this.logger.info('‚ö° Preparando datos para sincronizaci√≥n masiva...')

      const categoriesData = categories.map((categoryData) => ({
        category_id: categoryData.category_id,
        title: categoryData.name,
        url: categoryData.url ? categoryData.url.path : '',
        parent_id: categoryData.parent_id,
        order: categoryData.sort_order,
        image: categoryData.image_url,
        is_visible: categoryData.is_visible,
        tree_id: categoryData.tree_id || null,
      }))

      // üöÄ OPTIMIZACI√ìN: Sincronizaci√≥n masiva usando updateOrCreateMany
      this.logger.info('üöÄ Ejecutando sincronizaci√≥n masiva...')

      try {
        await Category.updateOrCreateMany(
          ['category_id'], // Clave √∫nica para identificar registros
          categoriesData
        )

        this.logger.info(
          `üéâ Sincronizaci√≥n masiva completada: ${categories.length} categor√≠as procesadas`
        )

        return {
          success: true,
          message: `Todas las ${categories.length} categor√≠as se sincronizaron correctamente`,
          data: {
            total: categories.length,
            faileds: [],
            message: 'Sincronizaci√≥n masiva exitosa',
          },
        }
      } catch (massiveError) {
        this.logger.error(
          '‚ùå Error en sincronizaci√≥n masiva, intentando sincronizaci√≥n individual...',
          massiveError
        )

        // üöÄ FALLBACK: Si falla la masiva, usar la estrategia individual como respaldo
        this.logger.info('üîÑ Ejecutando sincronizaci√≥n individual como respaldo...')

        const results = await Promise.all(
          categories.map(async (categoryData) => {
            try {
              const searchPayload = { category_id: categoryData.category_id }
              const persistancePayload = {
                category_id: categoryData.category_id,
                title: categoryData.name,
                url: categoryData.url ? categoryData.url.path : '',
                parent_id: categoryData.parent_id,
                order: categoryData.sort_order,
                image: categoryData.image_url,
                is_visible: categoryData.is_visible,
                tree_id: categoryData.tree_id || null,
              }

              const category = await Category.updateOrCreate(searchPayload, persistancePayload)
              this.logger.info(
                `‚úÖ Categor√≠a sincronizada: ${categoryData.name} (ID: ${categoryData.category_id})`
              )

              return {
                error: false,
                message: 'Categor√≠a sincronizada correctamente',
                data: category,
              }
            } catch (error) {
              this.logger.warn(`‚ö†Ô∏è Error al sincronizar categor√≠a ${categoryData.name}:`, error)
              return {
                error: true,
                message: `Error al sincronizar categor√≠a ${categoryData.name}: ${error instanceof Error ? error.message : 'Error desconocido'}`,
                data: categoryData,
              }
            }
          })
        )

        // Filtrar solo las categor√≠as que fallaron
        const failedCategories = results.filter((result) => result.error)

        if (failedCategories.length > 0) {
          this.logger.warn(
            `‚ö†Ô∏è Fallaron ${failedCategories.length} categor√≠as en la sincronizaci√≥n individual`
          )
        } else {
          this.logger.info(
            'üéâ Todas las categor√≠as se sincronizaron correctamente (modo individual)'
          )
        }

        return {
          success: failedCategories.length === 0,
          message:
            failedCategories.length > 0
              ? `Fallaron ${failedCategories.length} categor√≠as en la sincronizaci√≥n individual`
              : 'Todas las categor√≠as se sincronizaron correctamente (modo individual)',
          data: {
            total: categories.length,
            faileds: failedCategories,
            mode: 'individual_fallback',
          },
        }
      }
    } catch (error) {
      this.logger.error('‚ùå Error general en sincronizaci√≥n de categor√≠as:', error)
      throw new Error(
        `Error al sincronizar categor√≠as: ${error instanceof Error ? error.message : 'Error desconocido'}`
      )
    }
  }

  /**
   * üîó Sincroniza las relaciones producto-categor√≠a
   * Responsabilidad: Gestionar asociaciones entre productos y categor√≠as
   */
  async syncCategoriesByProduct(products: FormattedProductWithModelVariants[]) {
    try {
      this.logger.info(`üîÑ Sincronizando categor√≠as para ${products.length} productos...`)
      const startTime = Date.now()

      if (products.length === 0) {
        return { success: true, message: 'No hay productos para procesar', data: { processed: 0 } }
      }

      // üöÄ Formatear todas las relaciones de una vez
      const allRelations = products
        .filter((product) => product.categories && product.categories.trim() !== '')
        .flatMap((product) => {
          try {
            const categoryIds = JSON.parse(product.categories) as number[]
            return categoryIds
              .filter((id) => typeof id === 'number' && id > 0)
              .map((categoryId) => ({
                product_id: product.product_id,
                category_id: categoryId,
              }))
          } catch (error) {
            this.logger.warn(
              `‚ö†Ô∏è Error parseando categories del producto ${product.product_id}:`,
              error
            )
            return []
          }
        })

      if (allRelations.length === 0) {
        this.logger.info('‚ÑπÔ∏è No se encontraron categor√≠as v√°lidas para procesar')
        return {
          success: true,
          message: 'No hay categor√≠as v√°lidas para procesar',
          data: { processed: 0 },
        }
      }

      this.logger.info(`üì¶ Formateadas ${allRelations.length} relaciones para guardar masivamente`)

      // üöÄ Procesar en lotes // L√≠mite seguro para PostgreSQL
      const BATCH_SIZE = 1000
      const batches = []
      for (let i = 0; i < allRelations.length; i += BATCH_SIZE) {
        batches.push(allRelations.slice(i, i + BATCH_SIZE))
      }

      this.logger.info(
        `üì¶ Procesando ${batches.length} lotes de m√°ximo ${BATCH_SIZE} relaciones cada uno`
      )

      // üöÄ Procesar lotes en paralelo
      const batchResults = await Promise.all(
        batches.map(async (batch, batchIndex) => {
          try {
            await CategoryProduct.updateOrCreateMany(['product_id', 'category_id'], batch)
            this.logger.info(`‚úÖ Lote ${batchIndex + 1}: ${batch.length} relaciones guardadas`)
            return { processed: batch.length, batch: batchIndex + 1 }
          } catch (error) {
            this.logger.error(`‚ùå Error en lote ${batchIndex + 1}:`, error)
            return { processed: 0, batch: batchIndex + 1, error: error.message }
          }
        })
      )

      // üìä Consolidar resultados
      const totalProcessed = batchResults.reduce((sum, result) => sum + result.processed, 0)
      const errors = batchResults.filter((result) => result.error)

      const totalTime = Date.now() - startTime

      this.logger.info(`‚úÖ Sincronizaci√≥n completada: ${totalProcessed} relaciones guardadas`)

      if (errors.length > 0) {
        this.logger.warn(`‚ö†Ô∏è ${errors.length} lotes tuvieron errores`)
      }

      return {
        success: errors.length === 0,
        message:
          errors.length === 0
            ? `${totalProcessed} relaciones sincronizadas exitosamente`
            : `${totalProcessed} relaciones procesadas con ${errors.length} errores`,
        data: {
          processed: totalProcessed,
          total_products: products.length,
          batches: batches.length,
          errors: errors,
        },
        meta: {
          performance: {
            relations_per_second:
              totalProcessed > 0 ? Math.round((totalProcessed / totalTime) * 1000) : 0,
            total_processed: totalProcessed,
            total_batches: batches.length,
            total_time_ms: totalTime,
            error_rate: errors.length > 0 ? (errors.length / batches.length) * 100 : 0,
            products_with_categories: products.filter(
              (p) => p.categories && p.categories.trim() !== ''
            ).length,
          },
        },
      }
    } catch (error) {
      this.logger.error('‚ùå Error sincronizando categor√≠as por producto:', error)
      throw error
    }
  }

  /**
   * üìä Obtiene estad√≠sticas de categor√≠as
   */
  async getCategoriesStats() {
    try {
      const totalCategories = await Category.query().count('* as total')
      const totalRelations = await CategoryProduct.query().count('* as total')
      const categoriesWithProducts = await CategoryProduct.query()
        .select('category_id')
        .count('* as total')
        .groupBy('category_id')
        .orderBy('total', 'desc')
        .limit(10)

      return {
        success: true,
        data: {
          total_categories: Number(totalCategories[0].$extras.total),
          total_product_category_relations: Number(totalRelations[0].$extras.total),
          top_categories_with_products: categoriesWithProducts.map((cat) => ({
            category_id: cat.category_id,
            products_count: Number(cat.$extras.total),
          })),
        },
      }
    } catch (error) {
      this.logger.error('‚ùå Error al obtener estad√≠sticas de categor√≠as:', error)
      throw error
    }
  }

  //NUEVO üëÄ üëÄ
  async getChildCategories(category_id: number): Promise<number[]> {
    const logger = Logger.child({ service: 'CategoryService' })
    try {
      logger.info(`üë∂ Obteniendo categor√≠as hijas de la categor√≠a ${category_id}...`)

      let childCategoryIds = await Category.query()
        .where('parent_id', category_id)
        .select('category_id')

      // Tipar el par√°metro category
      const result = childCategoryIds.map(
        (category: { category_id: number }) => category.category_id
      )
      logger.info(`‚úÖ Categor√≠as hijas obtenidas: ${result.length} categor√≠as`)
      return result
    } catch (error) {
      logger.error('‚ùå Error al obtener categor√≠as hijas:', error)
      return []
    }
  }

  //NUEVO üëÄ üëÄ
  async getCampaignsByCategory(product: number, categories: number[]): Promise<string[]> {
    const logger = Logger.child({ service: 'CategoryService' })
    try {
      logger.info(
        `üéØ Obteniendo campa√±as para producto ${product} con ${categories.length} categor√≠as...`
      )

      let productCategories = await CategoryProduct.query()
        .where('product_id', product)
        .whereIn('category_id', categories)
        .preload('category', (query) => {
          query.select(['title', 'url', 'category_id'])
        })

      // Tipar el par√°metro item
      const result = productCategories.map((item: any) => item.category?.title).filter(Boolean)
      logger.info(`‚úÖ Campa√±as obtenidas para producto ${product}: ${result.length} campa√±as`)
      return result
    } catch (error) {
      logger.error('‚ùå Error al obtener campa√±as por categor√≠as:', error)
      return []
    }
  }
  async getDateReserve(reserveId: number) {
    const childsCategories = await Category.query()
      .select('category_id', 'title')
      .where('parent_id', reserveId)
      .pojo()

    return childsCategories
  }
}
